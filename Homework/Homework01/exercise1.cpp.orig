/**
Author:         Charles Reigle
Creation Date:  2/13/23
Last Update:    2/13/23
Description:
User Interface: Size: Input for the size of a random number array
Notes:
**/

#include <iostream>
#include <ctime>
#include <cstdlib>
#include <algorithm>

using namespace std;

void div();
int* duplicateArray(int*, int);
void display(int*, int);
int* getRandomNumbers(int);
void sort(int*, int);
bool sorted(int*, int);
void concat(int*&, int&, int*, int);
void remove(int*, int&, int, int);
void shuffle(int*, int);
void sub(int*, int&, int, int);
void insert(int*&, int&, int*, int, int);
void resize(int*&, int&, int);


int main(){
    int size = 0;

    cout << "Input Array Size: ";
    cin >> size;

    int *A = getRandomNumbers(size);

    display(A, size);
    sort(A, size);
    display(A, size);

    bool sort = sorted(A, size);

    if(sort){
        cout << "Array is sorted." << endl;
    } else {
        cout << "Array is not sorted." << endl;
    }


    return 0;
}

/**
Description: Prints a dividing bar into console
Parameters: None
Return: None
Notes:
**/
void div(){
    cout << endl;
    cout << "--------------------------------------" << endl;
}

/**
Description: Creates a new array of specified size full of random integers.
Parameters: Size of array
Return: Int array
Notes:
**/
int* getRandomNumbers(int size){
    int* arr = new int[size];

    for(int i = 0; i < size; i++){
        arr[i] = rand();
    }

    return arr;

}

/**
Description: Duplicates an array into another array.
Parameters: Int array to be duplicated, int size of array
Return: duplicated array
Notes:
**/
int* duplicateArray(int *arr, int size){
    int* arr2 = new int[size];

    for(int i = 0; i < size; i++){
        arr2[i] = arr[i];
    }

    return arr2;

}

/**
Description: Prints out the specified array to the console
Parameters: Int array, int size of array
Return: None
Notes:
**/
void display(int *arr, int size){
    cout << " ";
    for(int i = 0; i < size; i++){
        cout << arr[i] << " ";
    }
    cout << endl;
}

/**
Description: Bubble sorts the array that is input
Parameters: Int array, int size of array
Return: None
Notes:
**/
void sort(int *arr, int size){
    bool chg = true;

    while(chg){
        chg = false;
        for(int i = 0; i < size - 1; i++){
            if(arr[i] > arr[i + 1]){
                int temp = arr[i+1];
                arr[i + 1] = arr[i];
                arr[i] = temp;
                chg = true;
            }
        }
    }
}

/**
Description: Returns whether or not the specified array is sorted
Parameters: Int array, int array size
Return: True/False
Notes:
**/
bool sorted(int *arr, int size){
    for(int i = 0; i < size - 1; i++){
        if(arr[i] > arr[i + 1]){
            return false;
        }
    }
    return true;
}

/**
Description: Adds the second array onto the end of the first array
Parameters: Int first array, int first array size, int second array, int second array size
Return: None
Notes:
**/
void concat(int *&arr1, int &size1, int *arr2, int size2){

    int finalSize = size1 + size2;

    int* newArr = new int[finalSize];
    for(int i = 0; i < finalSize; i++){
        if(i < size1) newArr[i] = arr1[i];
        else {
            newArr[i] = arr2[i - size1];
        }
    }
    size1 = finalSize;
    delete[] arr1;
    arr1 = newArr;
}

/**
Description: Removes all numbers of the array between the specified indexes
Parameters: Int array, int array size, int beginning index, int ending index
Return: None
Notes:
**/
void remove(int *arr, int& size, int begin, int end){

    // If you try and start at a negative, start at 0
    if(begin < 0) begin = 0;

    // If the ending value is larger than the size, end at the last valid value
    if(end > size) end = size;

    // If you remove the entirety of the array, delete it
    if((end - begin) == size){
        delete[] arr;
        arr = nullptr;
    }

    int removed = (end - begin);
    int subSize = size - end;
    int* subArr = new int[subSize];  // Begin by grabbing the ending portion array we are keeping so we can slide it down.
    for(int i = 0; i < subSize; i++){
        subArr[i] = arr[end + i];
    }

    div();
    display(subArr, subSize);
    div();

    // Delete the portion we want removed
    for(int i = begin; i < end - 1; i++){
        arr[i] = 0;
    }

    size = size - removed - subSize; // Get the size of the beginning portion

    // Shift the tail down by concating the 2 segments
    concat(arr, size, subArr, subSize);

    delete[] subArr;
    subArr = nullptr;
}

/**
Description: Randomly shuffles the specified array
Parameters: Int array, int array size
Return: None
Notes:
**/
void shuffle(int *arr, int size){
    int* begin = &arr[0];
    int* end = &arr[size];

    random_shuffle(begin, end);
}

/**
Description: Removes all elements besides those inside the specified index bounds. Turns the array into a subarray of its previous self.
Parameters: Int array, int array size, int beginning index, int ending index
Return: None
Notes:
**/
void sub(int *arr, int &size, int begin, int end){

    if(begin < 0) begin = 0;
    if(end > size) end = size;

    int newSize = end - begin;
    int* subArray = new int[newSize];
    for(int i = 0; i < newSize; i++){
        subArray[i] = arr[begin + i];
    }
    for(int i = 0; i < size; i++){
        if(i < end) arr[i] = subArray[i];
        else arr[i] = 0;
    }
    size = newSize;

    delete[] subArray;
    subArray = nullptr;
}

/**
Description: Inserts one array into another at the specified index
Parameters: int array 1, int size of array 1, int array 2, int size of array 2, int index to be inserted at
Return: none
Notes: I don't know why it took so long, but I have lost literal years off of my life span creating this function.
**/
void insert(int *&arr, int &size, int *arr2, int size2, int index){

    if(index < 0) index - 0;
    if(index > size) index = size;

    int subSize = size - index;

    // Splits the one array into 2, dividing it at the index
    int* subArr = new int[subSize];
    int* beg = new int[index];

    for(int i = 0; i < subSize; i++){
        subArr[i] = arr[index + i];
    }

    for(int i = 0; i < index; i++){
        beg[i] = arr[i];
    }

    // Smashes the arrays together
    size = index;
    concat(beg, size, arr2, size2);
    concat(beg, size, subArr, subSize);

    // Forgive me God for I have sinned.
    delete[] subArr;
    subArr = nullptr;

    delete[] arr;

    // Not even entirely sure this is the most effecient however I know of no other way of resizing an array other than creating a new one and switching where it points to.
    arr = beg;

    beg = nullptr;

}

/**
Description: Resizes the array to the specified value
Parameters: int array, int size, int new size
Return: None
Notes:
**/
void resize(int *&arr, int &size, int n){
    int* newArr = new int[n];
    for(int i = 0; i < n; i++){
        if(i < size) newArr[i] = arr[i];
        else newArr[i] = 0;
    }

    delete[] arr;
    arr = newArr;

    newArr = nullptr;
    size = n;
}
